<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>Stark</string>
    <key>scopeName</key>
    <string>source.sk</string>
    <key>fileTypes</key>
    <array>
      <string>sk</string>
    </array>
    <key>uuid</key>
    <string>582789B5-991D-49E1-8E39-54327B3DBDFF</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#comment</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#control-keywords</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#keywords</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#async-keywords</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#builtin-types</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#vector-types</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#generic-modifiers</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#inline-il</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#type-attributes</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#visibility-modifiers</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#attribute-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#import-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#namespace-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#module-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#func-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#macro-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#invoke-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#type-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#definition-modulators</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#lifetime-identifier</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#macros</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#keywords</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#literals</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#measure_type</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>builtin-types</key>
      <dict>
        <key>match</key>
        <string>\b(bool|f64|f32|i64|i32|i16|i8|u64|u32|u16|u8|int|uint|string)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.type.sk</string>
          </dict>
        </dict>
      </dict>
      <key>vector-types</key>
      <dict>
        <key>match</key>
        <string>\b(v128|v256)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.type.sk</string>
          </dict>
        </dict>
      </dict>
      <key>generic-modifiers</key>
      <dict>
        <key>name</key>
        <string>storage.modifier.sk</string>
        <key>match</key>
        <string>\b(lifetime|permission)\b</string>
      </dict>
      <key>visibility-modifiers</key>
      <dict>
        <key>name</key>
        <string>storage.modifier.sk</string>
        <key>match</key>
        <string>(?&lt;!\.)\b(abstract|const|extern|internal|new|rkey|rnew|ropen|override|partial|public|pub|dynamic|static|unsafe|virtual)\b</string>
      </dict>
      <key>module-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(module)\b\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.module.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.module.sk</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>attribute-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(@)\s*([_[:alpha:]][_[:alnum:]]*(?:\s*\.\s*[_[:alpha:]][_[:alnum:]]*)*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>markup.underline.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>match</key>
                    <string>[_[:alpha:]][_[:alnum:]]*</string>
                    <key>name</key>
                    <string>entity.name.type.attribute.sk</string>
                  </dict>
                </array>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>inline-il</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(unsafe)\s+(il)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.unsafe.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.il.sk</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>import-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(import)\b\s*([_[:alpha:]][_[:alnum:]]*(?:\s*::\s*[_[:alpha:]][_[:alnum:]]*)*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.import.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>match</key>
                    <string>[_[:alpha:]][_[:alnum:]]*</string>
                    <key>name</key>
                    <string>entity.name.type.import.sk</string>
                  </dict>
                </array>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(import)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.import.sk</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>namespace-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(namespace)\b\s*([_[:alpha:]][_[:alnum:]]*(?:\s*\.\s*[_[:alpha:]][_[:alnum:]]*)*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.namespace.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>match</key>
                    <string>[_[:alpha:]][_[:alnum:]]*</string>
                    <key>name</key>
                    <string>entity.name.type.namespace.sk</string>
                  </dict>
                </array>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(namespace)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.namespace.sk</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>type-attributes</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>`(immutable|rw|transient|retainable|shared|rooted|unique|readable|soa|aos)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.type.sk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>`([_[:alpha:]][_[:alnum:]]*)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.class.sk</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>type-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b((?:(?:rw|transient|linear|region|ref)\s+)*struct|process|union|enum|interface|unit|type)(\s*`(?:soa|aos)\s*)?(?:\s*`(?:\w+|&lt;.*?&gt;)\s*)?\s+([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.type.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.soa_aos.sk</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.class.sk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(extend)(?:\s*`&lt;.*?&gt;)?\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.type.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.class.sk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(attr)\b\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.attr.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.attr.sk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.type.sk</string>
            <key>match</key>
            <string>\b(type)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.union.sk</string>
            <key>match</key>
            <string>\b(union)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.struct.sk</string>
            <key>match</key>
            <string>\b(struct)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.class.sk</string>
            <key>match</key>
            <string>\b(class)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.interface.sk</string>
            <key>match</key>
            <string>\b(interface)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.enum.sk</string>
            <key>match</key>
            <string>\b(enum)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.attr.sk</string>
            <key>match</key>
            <string>\b(attr)\b</string>
          </dict>
        </array>
      </dict>
      <key>definition-modulators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>^\s*(where)\s+([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.where.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.class.sk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>^\s*(where)\s+</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.where.sk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(^\s*(?:inherits|implements|throws))\b([_[:alpha:]][_[:alnum:]]*)?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.requires.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.class.sk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(^\s*(?:requires))\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.requires.sk</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>func-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b((?:(?:dispatch|override|extern|rw|partial|async)\s+)*func(?:\s+rw\s+this|\s+this)?)\s+([_[:alpha:]][_[:alnum:]]*)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.func.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.sk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b((?:(unsafe|partial)\s+)*operator(?:\s+(?:binary|unary)))\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.func.sk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(constructor)(\s+[_[:alpha:]][_[:alnum:]]*)?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.func.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.sk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.constructor.sk</string>
            <key>match</key>
            <string>\bconstructor\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.func.sk</string>
            <key>match</key>
            <string>\bfunc\b</string>
          </dict>
        </array>
      </dict>
      <key>macro-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(macro)\s+([_[:alpha:]][_[:alnum:]]*)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.macro.sk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.sk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.macro.sk</string>
            <key>match</key>
            <string>\bmacro\b</string>
          </dict>
        </array>
      </dict>
      <key>invoke-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>([_[:alpha:]][_[:alnum:]]*)(?:\s*\()</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.sk</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>control-keywords</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.control.conditional.if.sk</string>
            <key>match</key>
            <string>\bif\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.conditional.then.sk</string>
            <key>match</key>
            <string>\bthen\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.conditional.else.sk</string>
            <key>match</key>
            <string>\belse\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.do.sk</string>
            <key>match</key>
            <string>\bdo\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.while.sk</string>
            <key>match</key>
            <string>\bwhile\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.for.sk</string>
            <key>match</key>
            <string>\bfor\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.try.sk</string>
            <key>match</key>
            <string>\btry\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.catch.sk</string>
            <key>match</key>
            <string>\bcatch\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.yield.sk</string>
            <key>match</key>
            <string>\byield\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.return.sk</string>
            <key>match</key>
            <string>\breturn\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.break.sk</string>
            <key>match</key>
            <string>\bbreak\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.continue.sk</string>
            <key>match</key>
            <string>\bcontinue\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.throw.sk</string>
            <key>match</key>
            <string>\bthrow\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.ignore.sk</string>
            <key>match</key>
            <string>\bignore\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.abort.sk</string>
            <key>match</key>
            <string>\babort\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.switch.sk</string>
            <key>match</key>
            <string>\bswitch\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.case.sk</string>
            <key>match</key>
            <string>\bcase\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.with.sk</string>
            <key>match</key>
            <string>\bwith\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.boolean.true.sk</string>
            <key>match</key>
            <string>\btrue\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.boolean.false.sk</string>
            <key>match</key>
            <string>\bfalse\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.class.null.sk</string>
            <key>match</key>
            <string>\bnull\b</string>
          </dict>
        </array>
      </dict>
      <key>keywords</key>
      <dict>
        <key>name</key>
        <string>keyword.type.sk</string>
        <key>match</key>
        <string>\b(alias|as|base|default|fatal|get|is|has|let|match|implicit|out|params|ref|in|set|sizeof|this|typeof|value|var)\b</string>
      </dict>
      <key>async-keywords</key>
      <dict>
        <key>name</key>
        <string>keyword.type.sk</string>
        <key>match</key>
        <string>\b(async|await|spawn)\b</string>
      </dict>
      <key>comment</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>comment.block.sk</string>
            <key>begin</key>
            <string>/\*</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.sk</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\*/</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.sk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>(^\s+)?(?=//)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.whitespace.comment.leading.sk</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>comment.block.documentation.sk</string>
                <key>begin</key>
                <string>(?&lt;!/)///(?!/)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.sk</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$)</string>
              </dict>
              <dict>
                <key>name</key>
                <string>comment.line.double-slash.sk</string>
                <key>begin</key>
                <string>(?&lt;!/)//(?!/)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.sk</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$)</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>literals</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#char-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#verbatim-string-literal</string>
          </dict>
        </array>
      </dict>
      <key>numeric-literal</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.numeric.hex.sk</string>
            <key>match</key>
            <string>\b0(x|X)[0-9a-fA-F_]+(i8|i16|i32|i64|u8|u16|u32|u64)?\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.binary.sk</string>
            <key>match</key>
            <string>\b0(b|B)[01_]+(i8|i16|i32|i64|u8|u16|u32|u64)?\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.decimal.sk</string>
            <key>match</key>
            <string>\b([0-9_]+)?\.[0-9_]+((e|E)[0-9]+)?(f32|64)?\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.decimal.sk</string>
            <key>match</key>
            <string>\b[0-9_]+(e|E)[0-9_]+(f32|f64)?\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.decimal.sk</string>
            <key>match</key>
            <string>\b[0-9_]+(f32|f64)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.decimal.sk</string>
            <key>match</key>
            <string>\b[0-9_]+(i8|i16|i32|i64|u8|u16|u32|u64)?\b</string>
          </dict>
        </array>
      </dict>
      <key>char-literal</key>
      <dict>
        <key>name</key>
        <string>string.quoted.single.sk</string>
        <key>match</key>
        <string>'(\s+|[\w\\]+)'</string>
      </dict>
      <key>measure_type</key>
      <dict>
        <key>match</key>
        <string>'([a-zA-Z_][a-zA-Z_0-9]*)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.unit.sk</string>
          </dict>
        </dict>
      </dict>
      <key>string-character-escape</key>
      <dict>
        <key>name</key>
        <string>constant.character.escape.sk</string>
        <key>match</key>
        <string>\\.</string>
      </dict>
      <key>string-literal</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double.sk</string>
        <key>begin</key>
        <string>(?&lt;!\\)"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.sk</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(")|((?:[^\\\n])$)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.sk</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal.newline.sk</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-character-escape</string>
          </dict>
        </array>
      </dict>
      <key>verbatim-string-character-escape</key>
      <dict>
        <key>name</key>
        <string>constant.character.escape.sk</string>
        <key>match</key>
        <string>""</string>
      </dict>
      <key>lifetime-identifier</key>
      <dict>
        <key>name</key>
        <string>variable.storage.lifetime.sk</string>
        <key>match</key>
        <string>##+</string>
      </dict>
      <key>macros</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>variable.storage.macro.sk</string>
            <key>match</key>
            <string>\$+[A-Za-z_][A-Za-z_0-9]*</string>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.sk</string>
            <key>match</key>
            <string>(&lt;\$+|\$+&gt;|\{\$+|\$+\})</string>
          </dict>
        </array>
      </dict>
      <key>verbatim-string-literal</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double.sk</string>
        <key>begin</key>
        <string>\\"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.sk</string>
          </dict>
        </dict>
        <key>end</key>
        <string>"</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.sk</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#verbatim-string-character-escape</string>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>